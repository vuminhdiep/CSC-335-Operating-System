1. The purpose of the header files in C is to define information (signature) to be used in conjunction with the libraries, such as functions and data types for abstraction. In this case, the header files contain the definition of various data types like array, bitmap, linked list or libraries, interface for abstraction like mainbus, copyinout, etc.
When compiling, the header files will attach the signature to the corresponding C code body implementation in the C file which then changes into an `.o` binary file so that the system can run.

2. os161/src/kern/arch/sys161/main/start.S
It is typically written in MIPS assembly because it is the lowest level language that can interact with the hardware directly, and because the CPU starts up in MIPS mode. Assembler is used to convert the code into machine-readable instructions that can be executed by the processor.
In the code in `start.S`, _start is the entry point to set up the stack pointer, initializes memory, and then calls the C kernel entry point `_end`.

3. In os161/src/kern/lib, the C files contain different data structures and utility functions for use:
- The file `array.c` is for a dynamic array in the kernel (which means its size can be changed during runtime). The functions in this file provide a way to create, initialize, resize, and free the array. The purpose of these functions is to provide a way to manage a dynamic array in the kernel. Additionally, the `array_remove` function allows for the removal of elements from the array at a specific index. These functions are necessary for efficient memory management and data storage in the kernel.
- The file `bitmap.c` contains implementations of various functions related to manipulating a fixed-size array of bits, called a bitmap. The bitmap is stored as an array of bytes in the kernel which is used for storage management. The code defines functions to create, destroy, and manipulate a bitmap structure consisting of an array of bytes that represent bits.
- The file `bswap.c` is for swapping the byte order of 16, 32, 64-bit integers. These functions are useful for converting data between _LITTLE_ENDIAN and _BIG_ENDIAN, which is important for communicating data between different computer systems. There are code to convert between host byte order and network byte order but they are empty because os161 is run on _BIG_ENDIAN
- The file `kgets.c` contains the implementation of a function named kgets, which reads a string off the console and supports a few useful control characters such as backspace, erase line, erase word, and reprint input. The function only allows the normal 7-bit ASCII characters and does not include the terminating newline in the buffer passed back.
- The file `kprintf.c` is for printing to the console, including regular printing and panic for fatal errors. It also includes locks for non-polled and polled kprintfs
- The file `misc.c` implements two functions: kstrdup and strerror. kstrdup is similar to the standard library function strdup, but it uses kmalloc instead of malloc. strerror is a standard C function that returns a string corresponding to a given error code, but the kernel version of this function panics if the error code is not recognized.
- The file `time.c` contains two functions for performing arithmetic on time values represented as struct timespec. The function timespec_add adds two time values and stores the result in a third timespec struct, while timespec_sub subtracts two time values and stores the result in a third timespec struct. These functions take care of carrying over any seconds that exceed 60 and any nanoseconds that exceed 1 billion.
- The file `uio.c` contains implementation of functions related to user I/O operations in an operating system. It defines functions for moving data between user space and kernel space, initializing input/output vectors and user I/O structures, and moving zero-filled data.

4. The syscalls that os161 supports are SYS_fork, SYS_sbrk, SYS_umask. I found out in the file `os161/src/kern/include/kern/syscall.h` which is a header file containing the syscalls mapped to constants. I then compare the constants declared in syscall.h to syscall.c in switch cases whether they are implemented. Currently the syscalls are implemented sys_reboot, sys___time. The documentation of the syscalls can be found in the header file: os161/src/kern/include/kern/syscall.h
The file `os161/src/kern/include/syscall.h` is the header file for the syscalls that are already implemented as their functions are mapped to the corresponding integers.
If you want to add more syscalls implementation, the files that need to be changed are: `os161/src/kern/include/syscall.h`, `os161/src/kern/arch/mips/syscall/syscall.c` 

5. Five of the directories are:
- os161/src/kern/thread: This directory contains code for the core kernel-level thread system along with threadlist, clock and synchronization
- os161/src/kern/lib: This directory contains code for the library modules such as data structures, time, and utility functions the OS uses during operation.
- os161/src/kern/main: This directory contains code for the main menu interface of the system, the code for main.c is the main kernel when booting with welcoming messages and menu.c is for the list of command programs after booting the system
- os161/src/kern/test: This directory contains code for testing the structure, library, utility functions of the system
- os161/src/kern/proc: This directory contains code for a process (proc) structure for the kernel and other program with basic operations